package com.copyright.rup.qa.rfe.tests.steps;

import com.copyright.rup.common.logging.RupLogUtils;
import com.copyright.rup.qa.rfe.tests.data.TestDataHelper;
import com.copyright.rup.qa.rfe.tests.domain.User;
import com.copyright.rup.qa.rfe.tests.exceptions.ImplementationException;
import com.copyright.rup.qa.rfe.tests.pages.ContentRequestOptionsCitation;
import com.copyright.rup.qa.rfe.tests.pages.ContentRequestOptionsPage;
import com.copyright.rup.qa.rfe.tests.pages.PageFactory;
import com.copyright.rup.qa.rfe.tests.utils.Constants;

import org.jbehave.core.annotations.Then;
import org.jbehave.core.annotations.When;
import org.junit.Assert;
import org.slf4j.Logger;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Steps for Content Request Options.
 * @author Alexander_Kapitanov */
public class ContentRequestOptionsSteps {
    private PageFactory pages;
    private static String sLastTax;
    //private static final Logger LOGGER = RupLogUtils.getLogger();
    /** Default constructor.
     * @param pages */
    public ContentRequestOptionsSteps(PageFactory pages) {
        this.pages = pages;
    }
    private static Map<String, String> sPrice = new HashMap<>();
    private static final Logger LOGGER = RupLogUtils.getLogger();
    
    /** @param optionIndex 
     * @param expectedTitle */
    @Then("Title for Usage Option #$optionIndex on CRO page is \"$expectedTitle\"")
    public void titleForUsageOption(int optionIndex, String expectedTitle) {
        String actualTitle = pages.newContentRequestOptionsPage().getOrderOptionTitle(optionIndex);
        Assert.assertEquals("Incorrect title of option #" + optionIndex, expectedTitle, actualTitle);
    }
    
    /** @param optionIndex */
    @When("I click Get button for Usage Option #$optionIndex on CRO page")
    public void clickGetButton(int optionIndex) {
        pages.newContentRequestOptionsPage().clickOrderOptionGetButton(optionIndex);
    }
    
    /** @param optionName */
    @When("I click Get button for $optionName delivery option on CRO page")
    public void clickGetForOption(String optionName) {
        pages.newContentRequestOptionsPage().clickOrderOptionGetButton(optionName);
    }
    
    /** @param optionName 
     * @param expectedStateStr */
    @Then("Usage option \"$optionName\" is $expectedStateStr on CRO page")
    public void checkUsageOptionPresent(String optionName, String expectedStateStr) {
        boolean expectedState = "displayed".equals(expectedStateStr);
        boolean actualState =  pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName) != -1;
        Assert.assertEquals("Incorrect state of displaying usage option " + optionName, expectedState, actualState);
    }
    
    /** @param optionIndex 
     * @param expectedPrice */
    @Then("Price for Usage Option #$optionIndex on CRO page is \"$price\"")
    public void priceForUsageOption(int optionIndex, String expectedPrice) {
        String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
        Assert.assertEquals("Incorrect price of option #" + optionIndex, expectedPrice, actualPrice);
    }
    
    /** @param optionName */
    @Then("Price for Usage Option \"$optionName\" on CRO page is correct")
    public void priceForUsageOptionActualSource(String optionName) {
        int optionIndex =  pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
        ContentRequestOptionsCitation cit = pages.newContentRequestOptionsPage().citationSection();
        String catalogID = cit.getCitationParamValue(Constants.CATALOG_ID);
        User currentUser = LoginSteps.getCurrentUser();
        String expectedPrice = "$" 
                + TestDataHelper.getPriceForUsageOption(
                    currentUser.getClientId(), currentUser.getLogin(), catalogID, optionName);
        Assert.assertEquals("Incorrect price of option " + optionName, expectedPrice, actualPrice);
    }
    
    /** */
    @Then("Price for all Usage Options on CRO page is correct")
    public void priceForAllUsageOptions() {
        ContentRequestOptionsPage optionsPage = pages.newContentRequestOptionsPage();
        int number = optionsPage.getNumberOfOrderOptions();
        for (int optionIndex = 0; optionIndex < number; optionIndex ++) {
            String optionName = optionsPage.getOrderOptionTitle(optionIndex);
            String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
            ContentRequestOptionsCitation cit = pages.newContentRequestOptionsPage().citationSection();
            String catalogID = cit.getCitationParamValue(Constants.CATALOG_ID);
            User currentUser = LoginSteps.getCurrentUser();
            String expectedPrice = "$" 
                    + TestDataHelper.getPriceForUsageOption(
                        currentUser.getClientId(), currentUser.getLogin(), catalogID, optionName);
            Assert.assertEquals("Incorrect price of option " + optionName, expectedPrice, actualPrice);
        }
    }
    
    /** @param increaseSum */
    @Then("Price for all options on CRO page encresed on \"$increaseSum\"")
    public void encreasedPriceForAllUsageOptions(long increaseSum) {
        ContentRequestOptionsPage optionsPage = pages.newContentRequestOptionsPage();
        int number = optionsPage.getNumberOfOrderOptions();
        for (int optionIndex = 0; optionIndex < number; optionIndex ++) {
            String optionName = optionsPage.getOrderOptionTitle(optionIndex);
            String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
            ContentRequestOptionsCitation cit = pages.newContentRequestOptionsPage().citationSection();
            String catalogID = cit.getCitationParamValue(Constants.CATALOG_ID);
            User currentUser = LoginSteps.getCurrentUser();
            String expectedPrice = TestDataHelper.getPriceForUsageOption(
                        currentUser.getClientId(), currentUser.getLogin(), catalogID, optionName);
            if (!("TBD".equals(expectedPrice) || "0.00".equals(expectedPrice))) {
                Float actualPriceLong = Float.parseFloat(actualPrice.replace("$", ""));
                Float expectedPriceLong = Float.parseFloat(expectedPrice) + increaseSum;
                Assert.assertEquals("Incorrect price of option " + optionName, expectedPriceLong, actualPriceLong);
            }
        }
    }
   
    /** @param copies 
     * @param specInstr */
    @Then("Price for all options on CRO page is calculated for \"$specInstr\" special instruction, \"$copies\" copies")
    public void priceForAllUsageOptionsWithSpecInstr(String specInstr, int copies) {
        ContentRequestOptionsPage optionsPage = pages.newContentRequestOptionsPage();
        int number = optionsPage.getNumberOfOrderOptions();
        for (int optionIndex = 0; optionIndex < number; optionIndex ++) {
            String optionName = optionsPage.getOrderOptionTitle(optionIndex);
            String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
            ContentRequestOptionsCitation cit = pages.newContentRequestOptionsPage().citationSection();
            String catalogID = cit.getCitationParamValue(Constants.CATALOG_ID);
            User currentUser = LoginSteps.getCurrentUser();
            String specInstrValue = null;
            switch (specInstr) {
            case "Publisher Original":
                specInstrValue = "PublisherOriginalRequired";
                break;
            case "None":
                specInstrValue = "None";
                break;
            case "Title Page and Verso Req":
                specInstrValue = "TitlePageRequired";
                break;
            case "Clean Copy Required":
                specInstrValue = "CleanCopyRequired";
                break;
            case "Color Required":
                specInstrValue = "ColorRequired";
                break;
            case "Table of Contents Required":
                specInstrValue = "TOCReq";
                break;
            case "Cancel if not immediately available":
                specInstrValue = "ImmediateFillOnly";
                break;
            case "Skip my company's collections":
                specInstrValue = "ExternalFillOnly";
                break;
            default:
                throw new ImplementationException(specInstr);
            }
            String expectedPrice = "$" 
             + TestDataHelper.getPlaceOrderPrice(currentUser, catalogID, copies, specInstrValue, "Normal", optionName);
            LOGGER.debug("Expected for '{}': {}", optionName, expectedPrice);
            LOGGER.debug("Actual for '{}': {}", optionName, actualPrice);
            Assert.assertEquals("Incorrect price of option " + optionName, expectedPrice, actualPrice);
        }
    }
    
    /** @param optionName */
    @Then("Price for Purchase Usage Option \"$optionName\" on CRO page is correct")
    public void priceForOptionFromPlaceOrder(String optionName) {
        int optionIndex =  pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
        ContentRequestOptionsCitation cit = pages.newContentRequestOptionsPage().citationSection();
        String catalogID = cit.getCitationParamValue(Constants.CATALOG_ID);
        User currentUser = LoginSteps.getCurrentUser();
        String expectedPrice = "$";
        if (!"Book Loan".equals(optionName)) {
            expectedPrice += TestDataHelper.getPlaceOrderPrice(currentUser, catalogID, 1, "None", "Normal", optionName);
            setLastTax(TestDataHelper.getPlaceOrderTax(currentUser, catalogID, 1,
            "None", "Normal", optionName, "Unknovn"));
        } else {
            expectedPrice += TestDataHelper
                    .getPlaceOrderPrice(currentUser, catalogID, 1, "None", "Normal", optionName, "BookLoan");
            setLastTax(TestDataHelper.getPlaceOrderTax(currentUser, catalogID, 1,
            "None", "Normal", optionName, "BookLoan"));
        }
        Assert.assertEquals("Incorrect price of option " + optionName, expectedPrice, actualPrice);
    }
    
    /** */
    @Then("Update Content Usage Options button is available on CRO page")
    public void isUpdateContentUsageOptionsButtonAvailable() {
        Assert.assertTrue("Update Content Usage Options button is not available", 
            pages.newContentRequestOptionsPage().isUpdateContentUsageOptionsButtonAvailable());
    }
    
    /** @param expectedDOI */
    @Then("The value of DOI field on CRO page is \"$expectedDOI\"")
    public void checkDOI(String expectedDOI) {
        String actualDOI = pages.newContentRequestOptionsPage().citationSection().getCitationParamValue("DOI");
        Assert.assertEquals("Incorrect DOI on CRO page", expectedDOI, actualDOI);
    }
    
    /** @param expectedTitle  */
    @Then("Title of item in CRO page is \"$expectedTitle\"")
    public void checkTitle(String expectedTitle) {
        String actualtitle = pages.newContentRequestOptionsPage().getItemTitle();
        Assert.assertEquals("Incorrect title of item on CRO page", expectedTitle, actualtitle);
    }
    
    /** */
    @When("Advanced options is hiden on CRO page")
    public void hideAdvancedOptions() {
        pages.newContentRequestOptionsPage().showOrHideAdvancedOptions(false);
        pages.newContentRequestOptionsPage().waitLoading();
    }
    
    /** */
    @When("Advanced options is shown on CRO page")
    public void showAdvancedOptions() {
        pages.newContentRequestOptionsPage().showOrHideAdvancedOptions(true);
        pages.newContentRequestOptionsPage().waitLoading();
    }
    
    /** @param buttonName 
     * @param optionName */
    @Then("$buttonName button is visible for $optionName option on CRO page")
    public void checkButton(String buttonName, String optionName) {
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        List<String> buttons =  pages.newContentRequestOptionsPage().getOrderOptionButtons(optionIndex);
        Assert.assertTrue("There is no button " + buttonName + " for Contet use option " + optionName,
                buttons.contains(buttonName));
    }
    
    /** @param numberButtons 
     * @param optionName */
    @Then("$numberButtons buttons is available for $optionName option on CRO page")
    public void checkNumberOfButtonsForOption(int numberButtons, String optionName) {
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        List<String> buttons =  pages.newContentRequestOptionsPage().getOrderOptionButtons(optionIndex);
        Assert.assertEquals("Incorrect number of buttons for Contet use option " + optionName, 
                numberButtons, buttons.size());
    }

    /** */
    @Then("Link to show more options is enabled")
    public void showMoreOptionsEnabledCheck() {
        Assert.assertTrue("Show more options link is not enabled or not displayed", 
                pages.newContentRequestOptionsPage().isShowMoreOptionsLinkEnabled());
    }
    
    /** @param text */
    @Then("Link to show more options has text \"$text\"")
    public void checkTextShowMoreOptions(String text) {
        Assert.assertEquals("Incorrect link text",
                text, pages.newContentRequestOptionsPage().getTextFromShowMoreOptionsLink());
    }
    
    /** */
    @When("I click Show more options link on CRO page")
    public void clickShowMoreOptions() {
       pages.newContentRequestOptionsPage().clickShowMoreOptionsLink();
    }
    
    /** @param buttonName 
     * @param optionName */
    @When("I click $buttonName button for option $optionName")
    public void clickButtonForOption(String buttonName, String optionName) {
        showAdvancedOptions();
        pages.newContentRequestOptionsPage().clickOrderOptionButton(optionName, buttonName);
        pages.newContentRequestOptionsPage().waitLoading();
    }
    
    /** @param buttonName 
    * @param optionName */
   @When("I click $buttonName button on CRO page opened from Collections page for option $optionName")
   public void clickButtonForOptionPageOpenedFromCollections(String buttonName, String optionName) {
       ContentRequestOptionsPage page = new ContentRequestOptionsPage(false);
       page.clickOrderOptionButton(optionName, buttonName);
       page.waitLoading();
   }
    
    /** Get price and save it ot static variable for further usage.
     * @param optionName */
    @When("I get price for $optionName option on CRO page")
    public void getPriceForOption(String optionName) {
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
        setActualPrice(actualPrice);
    }
    
    /** @param optionName 
     * @param expectedPrice */
    @Then("Price for $optionName option on CRO page is \"$expectedPrice\"")
    public void checkPriceForOptionName(String optionName, String expectedPrice) {
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        String actualPrice = pages.newContentRequestOptionsPage().getOrderOptionPrice(optionIndex);
        Assert.assertEquals("Incorrect price on CRO page for option " + optionName, expectedPrice, actualPrice);
    }
    
    /** @param optionName */
    @Then("Terms apply link is under $optionName option on CRO page")
    public void termsApplyLink(String optionName) {
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        boolean result = pages.newContentRequestOptionsPage().isOrderOptionTermsApplyDisplayed(optionIndex);
        Assert.assertTrue("Terms Apply is not under " + optionName, result);
    }
    
    /** @param optionName */
    @Then("No Terms apply link is under $optionName option on CRO page")
    public void noTermsApplyLink(String optionName) {
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName);
        boolean result = pages.newContentRequestOptionsPage().isOrderOptionTermsApplyDisplayed(optionIndex);
        Assert.assertFalse("Terms Apply is under " + optionName, result);
    }
    /** */
    @Then("View Abstract link available on CRO page")
    public void abstractLinkAvailable() {
        Assert.assertTrue("Abstract link is not available on CRO page", 
                pages.newContentRequestOptionsPage().citationSection().isAbstractLinkAvailable());
    }

    /** */
    @Then("I click Back to Search on CRO page")
    
    public void viewMoreSearchLinkAvailable() {
        Assert.assertTrue("View more search results or change your search link is not available on CRO page", 
                pages.newContentRequestOptionsPage().isViewMoreSearchResultsLinkAvailable());
    }
    
    /** */
    @When("I click View more search results or change your search link on CRO page")
    public void clickViewMore() {
        pages.newContentRequestOptionsPage().clickViewMoreSearchResultsLink();
    }
    
    public static String getActualPrice() {
        return sPrice.get(Thread.currentThread().getName());
    }
    private static void setActualPrice(String actualPrice) {
        sPrice.put(Thread.currentThread().getName(), actualPrice);
    }

    /** */
    @When("I click Put in Cart button pn CRO page")
    public void clickPutInCart() {
        pages.newContentRequestOptionsPage().clickPutInCartButton();
    }
    /** */
    @When("I click Permissions link for opttions on CRO page")
    public void clickPermissions() {
        pages.newContentRequestOptionsPage().clickPermissionsLink();
        pages.newContentRequestOptionsPage().waitLoading();
    }
    /**@param expectedTabName .*/
    @Then("$expectedTabName tab is opened on CRO page")
    public void isPermissionsTabOpened(String expectedTabName) {
        String actualTabName = pages.newContentRequestOptionsPage().getActiveTabInUsageOptions();
        Assert.assertEquals("Incorrect tab is active on CRO page", expectedTabName, actualTabName);
    }
    
    /** */
    @When("I click Purchases link for opttions on CRO page")
    public void clickPurchases() {
        pages.newContentRequestOptionsPage().clickPurchasesLink();
        pages.newContentRequestOptionsPage().waitLoading();
    }
    
    /** */
    @When("I click Abstract link on CRO page")
    public void clickAbstract() {
        pages.newContentRequestOptionsPage().citationSection().clickAbstract();
    }
    
    /** */
    @Then("Abstract content is displayed on CRO page")
    public void checkAbstractContent() {
        Assert.assertTrue("Abstract content is not displayed", 
            pages.newContentRequestOptionsPage().citationSection().isAbstractContentDispalyed());
    }
    
    /** */
    @When("I click Change Citation button on CRO page")
    public void changeCitation() {
        pages.newContentRequestOptionsPage().citationSection().changeCitation();
    }
    /** */
    @When("I click Other Matches button on CRO page")
    public void otherMatches() {
        pages.newContentRequestOptionsPage().citationSection().clickOtherMatchesButton();
    }
    
    /** */
    @Then("Possible matches for citation are displayed on CRO page")
    public void checkOtherMatches() {
        Assert.assertTrue("Other Matches is not displayed", 
            pages.newContentRequestOptionsPage().possibleMatchesSection().isOtherMatchesDispalyed());
    }
   
    /**  */
    @When("I click Submit request using your citation button in Possible matches on CRO page")
    public void submitRequestUsingYourCitation() {
        pages.newContentRequestOptionsPage().possibleMatchesSection().submitRequestUsingYourCitation();
    }
    
    /**  */
    @When("I click Change Citation button in Possible matches on CRO page")
    public void changeCitationInPossibleMatches() {
        pages.newContentRequestOptionsPage().possibleMatchesSection().changeCitation();
    }
    
    /** @param itemIndex 
     * @param expectedTitle */
    @Then("Title of item #$itemIndex from possible matches on CRO page is \"$expectedTitle\"")
    public void checkTitleOfItemFromPossibleMatches(int itemIndex, String expectedTitle) {
        String actualTitle = pages.newContentRequestOptionsPage().possibleMatchesSection().getItemTitle(itemIndex);
        Assert.assertEquals("Incorrect title of item from possible matches #" + itemIndex, expectedTitle, actualTitle);
    }
    
    /** @param itemIndex */
    @When("I click Request this Item button for item #$itemIndex on CRO page")
    public void requestThisItem(int itemIndex) {
        pages.newContentRequestOptionsPage().possibleMatchesSection().requestThisItem(itemIndex);
    }
    
    /** */
    @When("I click Copy to Clipboard button on CRO page")
    public void copyToClipboardCitations() {
        pages.newContentRequestOptionsPage().citationSection().copyCitation();
    }
  
    /** @param expectedState  */
    @Then("Usage Options section is $expectedState on CRO page")
    public void usageOptionsAvailable(String expectedState) {
        if ("not available".equals(expectedState)) {
            Assert.assertFalse("Usage Options section is available", 
                pages.newContentRequestOptionsPage().isUsageOptionsSectionAvailable());    
        } else if ("available".equals(expectedState)) {
            Assert.assertTrue("Usage Options section is not available", 
                pages.newContentRequestOptionsPage().isUsageOptionsSectionAvailable());    
        } else {
            throw new ImplementationException(expectedState);
        }
    }
    /** */
    @Then("I save Usage Options")
    public void clickUpdateCUO() {
        pages.newMainPage().pressOkInDialog();
    }
    
    /** @param type  
     * @param state  
     * @param optionName */
    @Then("Terms Apply $type is $state for $optionName option on CRO page")
    public void verifyTermsApplyTextDisplayed(String type, String state, String optionName)  {
        // add 1 to index because numbers in xpath start from 1 but method getOrderOptionIndex returns
        // numbers starts from 0
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName) + 1;
        boolean isDisplayed;
        if ("text".equals(type)) {
            isDisplayed = pages.newContentRequestOptionsPage().isTermApplyTextDisplayed(optionIndex);
        } else if ("link".equals(type)) {
            isDisplayed = pages.newContentRequestOptionsPage().isTermApplyLinkDisplayed(optionIndex);
        } else {
            throw new RuntimeException("Incorrect type in story: " + type);
        }
        if ("displayed".equals(state)) {
            Assert.assertTrue("Terms Apply" + type + " is not displayed for option " + optionName, isDisplayed);
        } else {
            Assert.assertFalse("Terms Apply " + type + " is displayed for option " + optionName, isDisplayed);
        }
    }
    
    /** @param optionName 
     * @param expectedTipText */
    @Then("Tooltip is displayed when move mouse on question mark for "
        + "$optionName option on CRO page and has text \"$expectedTipText\"")
    public void verifyTooltip(String optionName, String expectedTipText) {
//add 1 to index because numbers in xpath start from 1 but method getOrderOptionIndex returns. numbers starts from 0
        int optionIndex = pages.newContentRequestOptionsPage().getOrderOptionIndex(optionName) + 1;
        String actualTipText = pages.newContentRequestOptionsPage().getTextOfTipForAliasd(optionIndex);
        Assert.assertEquals("Text of the tip is incorrect", expectedTipText, actualTipText);
    }

    /** @return the lastTax */
    public static String getLastTax() {
        return sLastTax;
    }
    /** @param lastTax the lastTax to set */
    public static void setLastTax(String lastTax) {
        ContentRequestOptionsSteps.sLastTax = lastTax;
    }
    
    /** @param state . */
    @Then("On CRO page Alt Metrics are $state")
    public void checkAltMetrics(String state) {
        boolean check = pages.newContentRequestOptionsPage().isAltMetricsPresent();
        if ("visible".equals(state)) {
            Assert.assertTrue("Altmetric data is not visible", check);
        } else {
            Assert.assertFalse("Altmetric data is visible when it shouldn't", check);
        }
    }
    
    /** @param culture . */
    @Then ("Culture of user is $culture")
    public void verifyCulture(String culture) {
        String expected;
        switch (culture) {
        case "Danish (Denmark)": 
            expected = "kr."; break;
        case "English (United States)": 
            expected = "$"; break;
        default:
            throw new ImplementationException(culture);
        } 
        boolean result = pages.newContentRequestOptionsPage().getOrderOptionPrice(0).contains(expected);
        Assert.assertTrue("Wrong culture is set", result);
    }
    
    /**@param expectedText .*/
    @Then("Error message appears with title: \"$expectedText\"")
    public void verifyErrorMessageTitle(String expectedText) {
        ContentRequestOptionsPage page = pages.newContentRequestOptionsPage();
        Assert.assertTrue("Error title label is not displayed", page.errorTitleLabel().isDisplayed());
        String actualText = page.errorTitleLabel().getText();
        Assert.assertEquals("Incorrect text of error label", expectedText, actualText);
    }
    
    /**@param expectedText .*/
    @Then("Error message appears with text: \"$expectedText\"")
    public void verifyErrorMessageText(String expectedText) {
        ContentRequestOptionsPage page = pages.newContentRequestOptionsPage();
        Assert.assertTrue("Error message label is not displayed", page.errorMsgLabel().isDisplayed());
        String actualText = page.errorMsgLabel().getText();
        Assert.assertEquals("Incorrect text of error label", expectedText, actualText);
    }
    
    /**@param expectedLinkText .*/
    @Then("'$expectedLinkText' link available in error message")
    public void verifyPleaseClickLink(String expectedLinkText) {
        ContentRequestOptionsPage page = pages.newContentRequestOptionsPage();
        Assert.assertTrue("Link is not displayed", page.errorMsgLink().isDisplayed());
        String actualText = page.errorMsgLink().getText();
        Assert.assertEquals("Incorrect text of link", expectedLinkText, actualText);
    }
    
    /***/
    @Then("Item can be found in personal library")
    public void itemInLibrary() {
        ContentRequestOptionsPage page = pages.newContentRequestOptionsPage();
        boolean itemIsInLibrary = page.isItemInLibrary();
        Assert.assertTrue("Link for item in library is missing", itemIsInLibrary);
    }

    /**
     * Verify that in Copy to Clipboard dialog in text field the data contains the necessary title.
     * @param expectedTitle .
     */
    @Then("In Copy to Clipboard window data contains a title $expectedTitle")
    public void verifyCopyTitleIsCorrect(String expectedTitle){
       boolean isCitationTitleCorrect = pages.newCopyToClipboardWindow().isCitationTitleCorrect(expectedTitle);
       Assert.assertTrue("Text field in Copy to Clipboard window doesn't contain expected title",
             isCitationTitleCorrect);
    }

    /**
     * Verify that in Copy to Clipboard dialog in text field the data is displayed in correct format.
     * @param expectedFormat .
     */
    @Then("In Copy to Clipboard window data is displayed on $expectedFormat format")
    public void verifyCopyFormatIsCorrect(String expectedFormat){
       boolean isDisplayedDataInCorrectFormat =
             pages.newCopyToClipboardWindow().isDisplayedDataInCorrectFormat(expectedFormat);
       Assert.assertTrue("Text field in Copy to Clipboard window doesn't contain expected data",
             isDisplayedDataInCorrectFormat);
    }
}
