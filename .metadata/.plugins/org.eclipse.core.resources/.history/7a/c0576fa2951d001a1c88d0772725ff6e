package com.copyright.rup.qa.rfe.tests.pages;

import static com.copyright.rup.qa.common.ui.support.UiSupport.find;
import static com.copyright.rup.qa.common.ui.support.UiSupport.findAll;

import com.copyright.rup.common.logging.RupLogUtils;
import com.copyright.rup.qa.common.ui.support.DriverRunner;
import com.copyright.rup.qa.common.ui.support.UiSupport;
import com.copyright.rup.qa.common.ui.support.element.IUiElement;
import com.copyright.rup.qa.common.ui.support.element.UiElementsList;
import com.copyright.rup.qa.rfe.tests.utils.Constants;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * Base page for all pages.
 * @author Alexander_Kapitanov
 *
 */
public class BasePage {
    
    private By pageLoaderAjax = By.xpath(
            ".//*[contains(@id, 'PostbackPanelContentForm')"
            + "or contains(@id,'mlpanelwait') "
            + "or contains(@id, 'ContentFrameLoadingPanelcontentFrame') "
            + "or contains(@id, 'ContentFrameLoadingPanelmlpanel')"
            + "or contains(@id, 'DocumentLoadingPanelpageContent')"
            + "or contains(@id, 'RadAjaxLoadingPanel')"
            + "or contains(@id, 'ViewerLoadingPanelViewerDiv')"
            + "or text()='Loading...' ]");
    
    private static final Logger LOGGER = RupLogUtils.getLogger();    
    
    private String name;
    private By titleElementLocator;
    
    /**
     * Wait while page is loading (loader image is displayed).
     */
    public void waitLoading() {
        LOGGER.debug("Wait loading");
        try {
            for (int i = 0; i <= Constants.LOADER_TIMEOUT; i ++) {
                LOGGER.debug("Sleep 1");
                //Loading may take time while accessing RFE from Russia. Having 1-second timeout we have more control
                // over time of loading. Using Selenide conditions is also complicated by loading overlay appearing
                // in different frames.
                sleepShort();
                LOGGER.debug("Switching");
                switchToDefaultContent();
                LOGGER.debug("Find loader element");
                boolean isLoading = find(pageLoaderAjax).isDisplayed();
                if (!isLoading) {
                    LOGGER.debug("Checking Content frame");
                    UiElementsList contentFrame = UiSupport.findAll(Constants.CONTENT_FRAME_LOCATOR);
                    if (contentFrame.size() > 0) {
                        switchToContentFrame();
                        isLoading = find(pageLoaderAjax).isDisplayed();
                    }
                    switchToDefaultContent();
                } 
                if (i == Constants.LOADER_TIMEOUT) {
                    Assert.fail("Content is loading more than " 
                        + Constants.LOADER_TIMEOUT + "seconds...");
                }
                if (isLoading) {
                    LOGGER.debug("Content loading...");
                } else {
                    switchToDefaultContent();
                    break;
                }
            }
        } finally {
            LOGGER.debug("Waiting ended");
        }
    }
    
    /**
     * System waits several seconds after text filters are set.
     */
    public void waitForFilterToApply() {
        UiSupport.sleep(Constants.SLEEP_AFTER_FILTER_SET);
    }
    
    /**
     * Waits until page return "ready" state.
     */
    public void waitPageLoading() {
        WebDriverWait wait = new WebDriverWait(DriverRunner.getWebDriver(), Constants.LOADER_TIMEOUT);
        wait.until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver webDriver) {
                return "complete".equals(((JavascriptExecutor)webDriver).executeScript("return document.readyState"));
            }
        });
    }
    
    /**
     * Wait for asynchronous operations to be completed.
     * @return true or false
     */
    public boolean waitForAjax() {
        WebDriver driver = DriverRunner.getWebDriver();
        WebDriverWait wait = new WebDriverWait(driver, Constants.IMPLICIT_TIMEOUT);
        ExpectedCondition<Boolean> jQueryLoad = new ExpectedCondition<Boolean>() {
            @Override
            public Boolean apply(WebDriver driver) {
                return ((Long)((JavascriptExecutor) DriverRunner.getWebDriver())
                    .executeScript("return jQuery.active") == 0);
            }
        };
        ExpectedCondition<Boolean> jsLoad = new ExpectedCondition<Boolean>() {
            @Override
            public Boolean apply(WebDriver driver) {
                return ("complete".equals(((JavascriptExecutor) DriverRunner.getWebDriver())
                    .executeScript("return document.readyState").toString()));
            }
        };
        return wait.until(jQueryLoad) && wait.until(jsLoad);
    }
    
    /**
     * Short sleep.
     */
    public void sleepShort() {
        UiSupport.sleep(Constants.SLEEPING_TIME_SEC_SHORT);
    }
    
    /**
     * Waiting for table loading values.
     */
    public void sleepForTable() {
        UiSupport.sleep(Constants.WAIT_FOR_TABLE);
    }
    
    /**
     * Medium sleep.
     */
    public void sleepMedium() {
        UiSupport.sleep(Constants.SLEEPING_TIME_SEC);
    }
    
    /**
     * Long sleep.
     */
    public void sleepLong() {
        UiSupport.sleep(Constants.LONG_SLEEPING_TIME_SEC);
    }
    
    /** @param element 
     * @param elementName 
     */
    protected void click(IUiElement element, String elementName) {
        LOGGER.debug("Click {}", elementName);
        element.scrollTo().click();
    }
    
    /** 
     * @param locator 
     * @param elementName 
     */
    protected void click(By locator, String elementName) {
        click(find(locator), elementName);
    }
    
    /** @param parentElement 
     * @param locator 
     * @param elementName 
     */
    protected void click(IUiElement parentElement, By locator, String elementName) {
         LOGGER.debug("Click {}", elementName);
         parentElement.find(locator).click();
     }
    
    /**
     * 
     * @param locator 
     * @param elementName 
     */
    protected void clickInContentFrame(By locator, String elementName) {
        switchToDefaultContent();
        switchToContentFrame();
        click(locator, elementName);
        try {
            switchToDefaultContent();
        } catch (Exception e) {
           LOGGER.debug("Handled exception");
        }
    }
    
    /**
     * 
     * @param locator 
     * @param elementName 
     */
    protected void clickInContentFrameAndAcceptAlert(By locator, String elementName) {
        switchToContentFrame();
        click(locator, elementName);
        try {
            UiSupport.confirm();
        } catch (NoAlertPresentException e) {
            LOGGER.debug("No alert appeared");
        }
        switchToDefaultContent();
    }
    
    
    /** @param locator 
     * @param elementName 
     */
    protected void doubleClick(By locator, String elementName) {
        doubleClick(find(locator).scrollTo(), elementName);
    }
    
    /**Double click on element.
     * @param element .
     * @param elementName .
     * @return .
     */
    protected IUiElement doubleClick(IUiElement element, String elementName) {
        LOGGER.debug("Click {}", elementName);
        return element.doubleClick();
    }
    
    /**
     * Switch to default content after working with frames.
     */
    protected void switchToDefaultContent() {
        LOGGER.debug("Switch to default content");
        UiSupport.switchTo().defaultContent();
    }
    
    /**
     * Switch to Content Frame of pages.
     */
    protected void switchToContentFrame() {
        LOGGER.debug("Switch to Content frame");
        UiSupport.switchTo().defaultContent();
        UiSupport.switchTo().frame(find(Constants.CONTENT_FRAME_LOCATOR).getWrappedElement());
    }
    
    /**
     * Switch to EDS Search frame.
     */
    protected void switchToEdsSearchFrame() {
        LOGGER.debug("Switch to EDS Search frame");
        switchToContentFrame();
        UiSupport.switchTo().frame(find(Constants.EDS_SEARCH_FRAME_LOCATOR).getWrappedElement());
    }
    
    /**
     * Switch to Panel Frame on page.
     */
    protected void switchToPanelFrame() {
        LOGGER.debug("Switch to Panel frame");
        UiSupport.switchTo().defaultContent();
        UiSupport.switchTo().frame(find(Constants.PANEL_FRAME_LOCATOR).getWrappedElement());
    }
    
    /**
     * Switch to Panel Frame on page.
     */
    protected void switchToDocument() {
        LOGGER.debug("Switch to Document frame");
        UiSupport.switchTo().defaultContent();
        UiSupport.switchTo().frame(find(Constants.ATALASOFT_DOCUMENT_VIEWER_LOCATOR).getWrappedElement());
    }
    
    /**
     * Switch to dialog window.
     */
    protected void switchToDialogFrame() {
        LOGGER.debug("Switch to Dialog frame");
        UiSupport.switchTo().defaultContent();
        UiSupport.switchTo().frame(find(Constants.DIALOG_FRAME_LOCATOR).getWrappedElement());
    }
    
    /**
     * Switch to frame where RFBI is located.
     */
    protected void switchToRfbiFrame() {
        LOGGER.debug("Switch to RFBI frame");
        UiSupport.switchTo().defaultContent();
        UiSupport.switchTo().frame(find(Constants.CONTENT_FRAME_LOCATOR).getWrappedElement());
        UiSupport.switchTo().frame(find(Constants.RFBI_FRAME_LOCATOR).getWrappedElement());
    }
    
    /** @param locator 
     * @param elementName 
     * @return true if displayed
     */
    protected boolean isElementDispalyed(By locator, String elementName) {
        LOGGER.debug("Check if element '{}'is displayed", elementName);
        boolean result = find(locator).isDisplayed();
        LOGGER.debug("Element '{}'is displayed: {}", elementName, result);
        return result;
    }
    
    /**Checks if element with specified locator is currently displayed.
     * @param locator 
     * @return true if displayed
     */
    protected boolean isElementDispalyed(By locator) {
        LOGGER.debug("Check if element with locator '{}' is displayed", locator);
        boolean result = find(locator).isDisplayed();
        LOGGER.debug("Element with locator '{}' is displayed: {}", locator, result);
        return result;
    }
    
    
    
    /**Checks if element with specified locator is currently enabled.
     * @param locator 
     * @return true if displayed
     */
    protected boolean isElementEnabled(By locator) {
        LOGGER.debug("Check if element with locator '{}' is enhabled", locator);
        boolean result = find(locator).isDisplayed() && find(locator).isEnabled();
        LOGGER.debug("Element with locator '{}' is enabled", locator);
        return result;
    }
    
    /** @param locator 
     * @param elementName 
     * @return true if enabled
     */
    protected boolean isElementEnabled(By locator, String elementName) {
        LOGGER.debug("Check if element '{}'is enabled", elementName);
        boolean result = isElementEnabled(locator);
        LOGGER.debug("Element '{}'is enabled: {}", elementName, result);
        return result;
    }
    
    /** @param element 
     * @param fieldName 
     * @param text 
     */
    protected void setValue(IUiElement element, String fieldName, String text) {
        LOGGER.debug("Set text '{}' to field {}", text, fieldName);
        element.clear();
        if (!"".equals(text)) { // if empty value then just clear field
            element.sendKeys(text);
        }
    }
    
    /** @param locator 
     * @param fieldName 
     * @param text 
     */
    protected void setValue(By locator, String fieldName, String text) {
        setValue(find(locator), fieldName, text);
    }
    
    /**
     * 
     * @param locator 
     * @param fieldName 
     * @param text 
     */
    protected void setValueInContentFrame(By locator, String fieldName, String text) {
        switchToContentFrame();
        setValue(locator, fieldName, text);
        switchToDefaultContent();
    }
    
    /**
     * Check if window with windowTitle is opened and has no error. <br>
     * If errors are present then throws exception.
     * @param windowTitle 
     * @return true if opened and has no errors
     */
    public boolean isWindowWithTitleOpened(String windowTitle) {
        LOGGER.debug("Check if '{}' page opened in a new window", windowTitle);
        boolean result = false;
        String curWinHandle = DriverRunner.getWebDriver().getWindowHandle();
        Set<String> handles = DriverRunner.getWebDriver().getWindowHandles();
        LOGGER.debug("Windows handles: {}", handles);
        WebDriver driverWindow = null;
        for (String handle : handles) {
            if (!handle.equals(curWinHandle)) {
                driverWindow = UiSupport.switchTo().window(handle);
                
            }
        }
        String title = driverWindow.getTitle();
        LOGGER.debug("New window title: {}", title);
        result = title.equals(windowTitle);
        String pageSource = driverWindow.getPageSource();
        driverWindow.close();
        UiSupport.switchTo().window(curWinHandle);
        LOGGER.debug("'{}' page opened in a new window: {}", windowTitle, result);
        if (result) {
            String errorsStr = getErrorOnPage(pageSource);
            if (!"".equals(errorsStr)) {
                Assert.fail("Target page was successfully opened but has erros: " + errorsStr);
            }
        }
        return result;
    }
    
    /**
     * Check if window with url contains urlPart is opened and has no error. <br>
     * If errors are present then throws exception.
     * @param urlPart 
     * @return true if opened and has no error
     */
    public boolean isWindowWithUrlContainsOpened(String urlPart) {
        waitLoading();
        LOGGER.debug("Check if '{}' page opened in a new window with url contains", urlPart);
        boolean result = false;
        String curWinHandle = DriverRunner.getWebDriver().getWindowHandle();
        Set<String> handles = DriverRunner.getWebDriver().getWindowHandles();
        LOGGER.debug("Windows handles: {}", handles);
        WebDriver driverWindow = null;
        for (String handle : handles) {
            if (!handle.equals(curWinHandle)) {
                driverWindow = UiSupport.switchTo().window(handle);
            }
        }
        waitPageLoading();
        String currentUrl = driverWindow.getCurrentUrl();
        LOGGER.debug("New window url: {}", currentUrl);
        result = currentUrl.contains(urlPart);
        driverWindow.close();
        UiSupport.switchTo().window(curWinHandle);
        
        LOGGER.debug("'{}' page opened in a new window with url contains: {}", urlPart, result);
        return result;
    }
    
    /**
     * Get the Url of opened window.
     * @return urlAddress
     */
    public String getUrlAddressOfCurrentWindow() {
        waitLoading();
        LOGGER.debug("Check if page opened in a new window");
        String curWinHandle = DriverRunner.getWebDriver().getWindowHandle();
        Set<String> handles = DriverRunner.getWebDriver().getWindowHandles();
        LOGGER.debug("Windows handles: {}", handles);
        WebDriver driverWindow = null;
        for (String handle : handles) {
            if (!handle.equals(curWinHandle)) {
                driverWindow = UiSupport.switchTo().window(handle);
            }
        }
        waitPageLoading();
        String urlAddress = driverWindow.getCurrentUrl();
        LOGGER.debug("New window url: {}", urlAddress);
        driverWindow.close();
        UiSupport.switchTo().window(curWinHandle);
        return urlAddress;
    }
    
    /**
     * 
     * @param pageSource 
     * @return text of error split by semicolumn or empty string if no errors
     */
    public String getErrorOnPage(String pageSource) {
        String errorsFound = "";
        StringBuffer buf = new StringBuffer();
        for (String errorText : Constants.ERRORS) {
            if(pageSource.toLowerCase().contains(errorText)) {
                buf.append(errorText);
                buf.append(";");
            }
        }
        errorsFound = buf.toString();
        return errorsFound;
    }

    /**
     * Get name of page.
     * @return the name (value of name field)
     */
    protected String getName() {
        return name;
    }
    
    /** Get value from specified field.
     * @param locator of input element 
     * @param fieldName name of field 
     * @return value of the field 
     */
    protected String getValue(By locator, String fieldName) {
        LOGGER.debug("Get value from '{}' field", fieldName);
        String value = find(locator).getAttribute("value");
        LOGGER.debug("Value of '{}' field is '{}'", fieldName, value);
        return value;
    }
    

    /** @param element 
     * @param elementName 
     * @return text 
     */
    protected String getText(IUiElement element, String elementName) {
        LOGGER.debug("Get text from '{}' element", elementName);
        String value = element.getText();
        LOGGER.debug("Text of '{}' element is '{}'", elementName, value);
        return value;
    }
    
    /**
     * @param locator 
     * @param fieldName 
     * @return text
     */
    protected String getTextInContentFrame(By locator, String fieldName) {
        switchToContentFrame();
        String text = getText(locator, fieldName);
        switchToDefaultContent();
        return text;
    }
    

    /** Get text from specified field.
     * @param locator of element 
     * @param fieldName name of element 
     * @return text of element 
     */
    protected String getText(By locator, String fieldName) {
        return getText(find(locator), fieldName);
    }
    
    /** @param locator 
     * @param elementIndex 
     * @param fieldName 
     * @return text
     */
    protected String getText(By locator, int elementIndex, String fieldName) {
        return getText(findAll(locator).get(elementIndex), fieldName);
    }
    
    /** @param parentElement 
     * @param locator 
     * @param elementName 
     * @return text 
     */
    protected String getText(IUiElement parentElement, By locator, String elementName) {
        LOGGER.debug("Get text from '{}' element", elementName);
        String value = parentElement.find(locator).getText();
        LOGGER.debug("Text of '{}' element is '{}'", elementName, value);
        return value;
    }
    
    /**
     * Get text of uielemnt without text of its children.
     * @param el uielement
     * @return text
     */
    protected String getTextWithoutChildren(IUiElement el) {
        String text =(String) UiSupport.executeJavaScript(
            "return jQuery(arguments[0]).contents()"
                + ".filter(function() {return this.nodeType == Node.TEXT_NODE;}).text();", el.getWrappedElement());
        return text;
    }

    /**
     * @param name the name to set
     */
    protected void setName(String name) {
        this.name = name;
    }

    /**
     * @return the titleElementLocator
     */
    protected By getTitleElementLocator() {
        return titleElementLocator;
    }

    /**
     * @param titleElementLocator the titleElementLocator to set
     */
    protected void setTitleElementLocator(By titleElementLocator) {
        this.titleElementLocator = titleElementLocator;
    }

    /**
     * Checks if page is opened in current moment.<br>
     * Uses title and name parameters from child classes<br>
     * @return true if opened
     */
    public boolean isOpened() {
        LOGGER.debug("Check if {} page is opened", name);
        waitLoading();
        switchToContentFrame();
        boolean result = isElementDispalyed(titleElementLocator);
        switchToDefaultContent();
        
        LOGGER.debug("{} page is opened: {}", name, result);
        return result;
    }
    
    /**
     * 
     * @param locator 
     * @param elementName 
     * @return true if displayed
     */
    protected boolean isElementDispalyedInContentFrame(By locator, String elementName) {
        switchToContentFrame();
        boolean result = isElementDispalyed(locator, elementName);
        switchToDefaultContent();
        return result;
    }
    
    /** Checks if element with specified locator is currently displayed.
     * @param locator 
     * @param index 
     * @return true if displayed
     */
    protected boolean isElementDispalyed(By locator, int index) {
        boolean result = false;
        IUiElement el;
        try {
            el = UiSupport.findAll(locator).get(index);
            
        } catch (Exception e) {
            return result;
        }
        result = el.isDisplayed();
        return result;
    }
    
    /** Checks if element with specified locator in parent element is currently displayed.
     * @param locator 
     * @param parentElement 
     * @return true if displayed
     */
    protected boolean isElementDispalyed(By locator, IUiElement parentElement) {
        boolean result = false;
        IUiElement el;
        try {
            el = parentElement.find(locator);
            
        } catch (NoSuchElementException e) {
            return result;
        }

        result = el.isDisplayed();
        return result;
    }
    
    /**
     * 
     * @param selectLocator 
     * @param value 
     * @param selectName 
     */
    protected void selectValueInContentFrame(By selectLocator, String value, String selectName) {
        switchToContentFrame();
        selectValue(selectLocator, value, selectName);
        switchToDefaultContent();
    }
    
    /** Select value in classical HTML select tag.
     * @param selectLocator 
     * @param value 
     * @param selectName 
     */
    protected void selectValue(By selectLocator, String value, String selectName) {
        LOGGER.debug("Select value '{}' in '{}' select", value, selectName);
        find(selectLocator).selectOption(value);
    }
    
    /** @param locator 
     * @param checkboxName 
     * @param isChecked 
     */
    protected void setCheckbox(By locator, String checkboxName, boolean isChecked) {
        LOGGER.debug("Set checkbox {}: {}", checkboxName, isChecked);
        boolean currecntState = find(locator).
            getAttribute("class").contains("rbToggleCheckboxChecked");
        if (isChecked == currecntState) {
            LOGGER.debug("Checkbox is in current state. No actions required");
        } else {
            click(locator, checkboxName + " checkbox");
        }
    }
    
    /**
     * 
     * @param locator 
     * @param checkboxName 
     * @param isChecked 
     */
    protected void setCheckboxInContentFrame(By locator, String checkboxName, boolean isChecked) {
        switchToContentFrame();
        setCheckbox(locator, checkboxName, isChecked);
        switchToDefaultContent();
    }
    
    /** @param locator 
     * @param checkboxName 
     * @return true if checked
     */
    protected boolean isCheckboxChecked(By locator, String checkboxName) {
        LOGGER.debug("Get state of checkbox {}", checkboxName);
        String elementClass = find(locator).getAttribute("class");
        boolean state = elementClass.contains("rbToggleCheckboxChecked");
        LOGGER.debug("Checkbox {} checked: {}", checkboxName, state);
        return state;
    }
    
    /** @param locator 
     * @param checkboxName 
     * @return true if enabled
     */
    protected boolean isCheckboxEnabled(By locator, String checkboxName) {
        LOGGER.debug("Get availability of checkbox {} ", checkboxName);
        String  elementDisabledAtr = find(locator).find(By.xpath(".//..")).getAttribute("disabled");
        boolean state = !"true".equals(elementDisabledAtr);
        LOGGER.debug("Checkbox {} enabled: {}", checkboxName, state);
        return state;
    }
    
    /** @param fieldLocator 
     * @param fieldName 
     * @return selected value
     */
    protected String getComboboxSelectedValue(By fieldLocator, String fieldName) {
        LOGGER.debug("Get selected value from combobox '{}'", fieldName);
        String value = getValue(fieldLocator, fieldName);
        return value;
    }
    
    /**
    * 
    * @param fieldLocator 
    * @param elementName 
    * @return selected value
    */
   protected String getComboboxSelectedValueInContentFrame(By fieldLocator, String elementName) {
       switchToContentFrame();
       String value = getComboboxSelectedValue(fieldLocator, elementName);
       switchToDefaultContent();
       return value;
   }
    
    /** @param fieldLocator 
     * @param listItemLocator 
     * @param fieldName 
     * @return list of text values
     */
    protected List<String> getComboboxValues(By fieldLocator, By listItemLocator, String fieldName) {
        LOGGER.debug("Get values from combobox '{}'", fieldName);
        click(fieldLocator, fieldName + " field (to open combobox list)");
        UiElementsList itemsElements = findAll(listItemLocator);
        List<String> itemsList = new ArrayList<>();
        for (int i = 0; i < itemsElements.size(); i++) {
            itemsList.add(itemsElements.get(i).getText());
        }
        LOGGER.debug("Itesm of combobox '{}': {}", fieldName, itemsList);
        return itemsList;
    }
        
    /**
     * 
     * @param fieldLocator 
     * @param listItemLocator 
     * @param elementName 
     * @return list of text values
     */
    protected List<String> getComboboxValuesInContentFrame(By fieldLocator,
            By listItemLocator, String elementName) {
        switchToContentFrame();
        List<String> resultList = getComboboxValues(fieldLocator, listItemLocator, elementName);
        switchToDefaultContent();
        return resultList;
    }
    
    /**
     * Closes currently active page if its title is correct.
     * @param pageName 
     */
    public void closePage(String pageName) {
        LOGGER.debug("Close page: {}", pageName);
        if (UiSupport.title().equals(pageName)) {
            UiSupport.close();
        }
        String curWinHandle = System.getProperty("curWinHandle");
        UiSupport.switchTo().window(curWinHandle).close();
    }
    
    /**
     * Sometimes system have a delay for a couple of seconds before refreshing of table start. For avoiding errors in 
     * such cases we need to wait until loading start before we wait for loading to end.
     */
    public void waitForLoadingToStart() {
        WebDriver driver = DriverRunner.getWebDriver();
        Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
            .withTimeout(Constants.IMPLICIT_TIMEOUT, TimeUnit.SECONDS)
            .pollingEvery(100, TimeUnit.MILLISECONDS)
            .ignoring(TimeoutException.class);
        switchToContentFrame();
        wait.until(ExpectedConditions.visibilityOfElementLocated(pageLoaderAjax));
    }

}

