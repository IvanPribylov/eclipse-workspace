package com.copyright.rup.qa.rfe.tests.pages;

import static com.copyright.rup.qa.common.ui.support.UiSupport.find;
import static com.copyright.rup.qa.common.ui.support.UiSupport.findAll;

import com.copyright.rup.common.logging.RupLogUtils;
import com.copyright.rup.qa.common.ui.support.UiElementCondition;
import com.copyright.rup.qa.common.ui.support.UiSupport;
import com.copyright.rup.qa.common.ui.support.element.IUiElement;
import com.copyright.rup.qa.common.ui.support.element.UiElementsList;
import com.copyright.rup.qa.rfe.tests.elements.Block;
import com.copyright.rup.qa.rfe.tests.elements.Label;
import com.copyright.rup.qa.rfe.tests.elements.Link;
import com.copyright.rup.qa.rfe.tests.elements.annotations.Element;
import com.copyright.rup.qa.rfe.tests.elements.annotations.ElementTypes;
import com.copyright.rup.qa.rfe.tests.utils.Constants;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.slf4j.Logger;

import java.util.ArrayList;
import java.util.List;

/** Elements and methods of Content Request Options page.
 * @author Alexander_Kapitanov
 *
 */
public class ContentRequestOptionsPage extends BasePage implements IPage, IPageOpenedInPanel {
   
    /** Default constructor.
     */
    public ContentRequestOptionsPage() {
        super.setName(this.name);
        super.setTitleElementLocator(this.title);
    }
    
    /**
     * We can get the same but with other frame when open it from Collections.
     * @param isContentFrame true when ContentFrame, false when PanelFrame
     */
    public ContentRequestOptionsPage(boolean isContentFrame) {
        super.setName(this.name);
        super.setTitleElementLocator(this.title);
        this.isContentFrame = isContentFrame;
    }
    
    private boolean isContentFrame = true;
    private static final Logger LOGGER = RupLogUtils.getLogger();
    private By title = By.cssSelector(".croHeading");
    private String name = "Content Request Options";
    // Citation
    private By viewMoreSearchResultsLink = By.xpath(
            ".//*[@id='BackBtnDiv']");
    private By itemTitle = By.xpath(".//*[@class='rfemdTitle']");
    private By itemInLibrary = By.xpath(".//span/a[contains(text(),'your personal library')]");
    private By altMetricBadge = By.id("AltMetrics");
    private By errorTitleLabel = By.id("ErrorMsgTitle");
    private By errorMsgLabel = By.id("ErrorMsgText");
    private By errorMsgLink = By.cssSelector("#ErrorMsgText .rfeLink");
    
    // Order options
    private String buttonForUsage = 
        ".//*[contains(@class,'croUseSection')][.//*[contains(text(),'%s')]]//div[contains(@id,'%s')]";
    private By usageOptionsSection = By.id("OrderOptionsDiv");
    private By advancedOptionsButton = By.id("croAdvancedOptions");
    private By permissionsLink = By.id("PermLink");
    private By purchasesLink = By.id("PurchaseLink");
    private By activeTabInUsageOptions = By.cssSelector(".croOptionsChoice.croActive a");
    private By orderOptions = By.cssSelector("#OrderOptions");
    //whole line in content usage options with title, price, buttons
    private By orderOption = By.xpath(
            ".//*[@id='OrderOptions']/*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))]");
    private String termApplyXpathPattern = 
        ".//*[@id='OrderOptions']/*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))][%s]"
        + "//*[contains(@class,'errorColor')]";
    private String termsApplyLinkXpathPattern = 
        ".//*[@id='OrderOptions']/*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))][%s]"
            + "//*[contains(@id,'TERMS')]";
    private String aliasTipXpathPattern = 
        ".//*[@id='OrderOptions']/*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))][%s]"
        + "//*[contains(@class,'croAliasTip')]";
    private By orderOptionTermsApplyLink = By.xpath(".//*[contains(@class,'croTermsApply')]");
    private By orderOptionButtons = By.xpath(".//*[contains(@class,'croUseLinkText')]");
    private By orderOptionsTitle = By.xpath(
            ".//*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))]"
            + "//*[contains(@class,'croUseHeading')]");
    private By orderOptionsButton = By.xpath(
            ".//*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))]"
            + "//*[contains(@class,'croUseLinkText')]");
    private By orderOptionsPrice = By.xpath(
            ".//*[contains(@class,'croUseSection')][not(contains(@style,'display:none'))]"
            + "//*[contains(@class,'croUseFeeValue')]");
    private By showMoreOptionsLink = By.xpath(".//*[@id='showAllLink']//a");
    private By putInCartButton = By.id("SubmitBtn_input");
    private By updateContentUsageOptionsButton = By.cssSelector("#UpdateOptionsBtn_input");
    private By tip = By.xpath(".//*[contains(@id,'RadToolTipWrapper')]//*[contains(@class,'rtWrapperContent')]");

    
    /**Page may be opened in panel frame (for example when opens from Collections).
     * @return true if opened.
     */
    public boolean isOpenedInPanelFrame() {
        LOGGER.debug("Check if 'CRO' page is opened in Panel frame");
        waitLoading();
        switchToPanelFrame();
        boolean result = isElementDispalyed(title);
        switchToDefaultContent();
        LOGGER.debug("'CRO' page is opened in Panel frame: {}", result);
        return result;
    }
    
    /** @return Tracking information section page object*/
    public ContentRequestOptionsTrackingInformation trackingInformation() {
        return new ContentRequestOptionsTrackingInformation();
    }
    
    /** @return page contains Delivery options UI elements and their methods.*/
    public DeliveryOptionsPage deliveryOptions() {
        return new DeliveryOptionsPage();
    }

    /** @return Citation Section Page Object*/
    public ContentRequestOptionsCitation citationSection() {
        return new ContentRequestOptionsCitation();
    }
    
    /** @return Possible Matches section page object*/
    public ContentRequestOptionsPossibleMatches possibleMatchesSection() {
        return new ContentRequestOptionsPossibleMatches();
    }
    
    /** @param index
     *            starts from 0
     * @return option title
     */
    public String getOrderOptionTitle(int index) {
        switchToContentFrame();
        LOGGER.debug("Get title of usage option #: {}", index);
        String optionTitle = find(orderOptions).findAll(orderOptionsTitle).get(index).getText();
        switchToDefaultContent();
        LOGGER.debug("Title = {}", optionTitle);
        return optionTitle;
    }
    
    /** @return number of Order Options*/
    public int getNumberOfOrderOptions() {
        switchToContentFrame();
        LOGGER.debug("Get number of order options");
        int number = findAll(orderOptionsTitle).size();
        switchToDefaultContent();
        LOGGER.debug("Number of order options: {}", number);
        return number;
    }
    
    /** @param index
     *            starts from 0
     * @return true if displayed*/
    public boolean isOrderOptionTermsApplyDisplayed(int index) {
        boolean result = false;
        switchToContentFrame();
        LOGGER.debug("Check if Terms Apply link is displayed for usage option #: {}", index);
        IUiElement orderOptionElement = findAll(orderOption).get(index);
        result = isElementDispalyed(orderOptionTermsApplyLink, orderOptionElement);
        switchToDefaultContent();
        LOGGER.debug("Terms Apply link is displayed = {} for usage option #{}", result, index);
        return result;
    }

    /** @param index
     *            starts from 0*/
    public void clickOrderOptionGetButton(int index) {
        switchToContentFrame();
        LOGGER.debug("Click get button #{}", index);
        find(orderOptions).findAll(orderOptionsButton).get(index).click();
        switchToDefaultContent();
    }
    
    /** @param optionName */
    public void clickOrderOptionGetButton(String optionName) {
        int index = getOrderOptionIndex(optionName);
        if (index == -1) {
            Assert.fail("No delivery option with title: " + optionName);
        }
        switchToContentFrame();
        find(orderOptions).findAll(orderOptionsButton).get(index).click();
        switchToDefaultContent();
    }
    
    /** @param optionName 
     * @return option index starts with 0. -1 if option is not found*/
    public int getOrderOptionIndex(String optionName) {
        switchToFrame();
        LOGGER.debug("Get option index: {}", optionName);
        IUiElement options = find(orderOptions);
        if (!options.exists()) {
            isContentFrame = !isContentFrame;
            switchToFrame();
            options = find(orderOptions);
        }
        UiElementsList listTitlesEls = options.findAll(orderOptionsTitle);
        int index = -1;
        for (int i = 0; i < listTitlesEls.size(); i++) {
            if (listTitlesEls.get(i).getText().equals(optionName)) {
                index = i;
                break;
            }
        }
        switchToDefaultContent();
        LOGGER.debug("Option {} index: {}", optionName, index);
        return index;
    }

    /** @param index
     *            starts from 0
     * @return order option price*/
    public String getOrderOptionPrice(int index) {
        switchToContentFrame();
        LOGGER.debug("Get price of usage option #: {}", index);
        String price = find(orderOptions).findAll(orderOptionsPrice).get(index).getText();
        switchToDefaultContent();
        LOGGER.debug("Price = {}", price);
        return price;
    }
    
    /** @param optionIndex
     *            starts from 0
     * @return list of names of the buttons*/
    public List<String> getOrderOptionButtons(int optionIndex) {
        LOGGER.debug("Get list of buttons for option #{}", optionIndex);
        switchToContentFrame();
        ArrayList<String> buttonsList = new ArrayList<>();
        IUiElement optionEl = findAll(orderOption).get(optionIndex);
        UiElementsList buttonsElements = optionEl.findAll(orderOptionButtons);
        for (int i = 0; i < buttonsElements.size(); i++) {
            String buttonName = buttonsElements.get(i).getText();
            buttonsList.add(buttonName);
        }
        switchToDefaultContent();
        LOGGER.debug("List of buttons for option #{}: ", buttonsElements);
        return buttonsList;
    }
    
    private void switchToFrame() {
        switchToDefaultContent();
        if (isContentFrame) {
            switchToContentFrame();
        } else {
            switchToPanelFrame();
        }
    }
    
    /** @param optionName 
     * @param buttonName */
    public void clickOrderOptionButton(String optionName, String buttonName) {
        LOGGER.debug("Click button {} for option #{}", buttonName, optionName);
        switchToFrame();
        String buttonId = getButtonId(buttonName);
        IUiElement button = UiSupport.find(By.xpath(String.format(buttonForUsage, optionName, buttonId)));
        button.click();
        waitLoading();
    }   
    
    private String getButtonId(String buttonName) {
        String buttonId= "";
        switch (buttonName) {
        case "View Now":
            buttonId = "VBTN_";
            break;
        case "Get Content":
            buttonId = "O3BTN_') or contains(@id,'O4BTN_";
            break;
        case "Covered":
            buttonId = "CBTN_N";
            break;
        case "Request Permission":
            buttonId = "OBTN_N') or contains(@id,'O2BTN_N";
            break;
        default:
            buttonId = "";
        }
        return buttonId;
    }

    /** @return item title*/
    public String getItemTitle() {
        switchToContentFrame();
        String itemTitleValue = getText(itemTitle, "Item Title");
        switchToDefaultContent();
        return itemTitleValue;
    }
    
    /** @param show true - to show, false - to hide*/
    public void showOrHideAdvancedOptions(boolean show) {
        LOGGER.debug("Will show advanced options: {}", show);
        switchToContentFrame();
        if (find(advancedOptionsButton).is(UiElementCondition.VISIBLE)) {
            String advancedOptionsTitle = find(advancedOptionsButton).getAttribute("title");
            // title may contain two values: "Show Basic Options" - when enabled or
            // "Show Advanced Options" - when disabled
            boolean isEnabled = "Show Basic Options".equals(advancedOptionsTitle);
            boolean isActionRequired = show != isEnabled;
            if (isActionRequired) {
                LOGGER.debug("Click Advanced options button");
                find(advancedOptionsButton).click();
            } else {
                LOGGER.debug("No action required for advanced options");
            }
        }
        switchToDefaultContent();
    }
    
    /**@return true if enabled*/
    public boolean isShowMoreOptionsLinkEnabled() {
        LOGGER.debug("Check if Show more options link enabled");
        switchToContentFrame();
        boolean result = isElementDispalyed(showMoreOptionsLink) && find(showMoreOptionsLink).isEnabled();
        switchToDefaultContent();
        LOGGER.debug("Show more options link enabled: {}", result);
        return result;
    }
    
    /** @return text of the link*/
    public String getTextFromShowMoreOptionsLink() {
        LOGGER.debug("Get tex of Show more options link");
        switchToContentFrame();
        String text = find(showMoreOptionsLink).getText();
        LOGGER.debug("Link text: {}", text);
        switchToDefaultContent();
        return text;
    }
    
    /** */
    public void clickShowMoreOptionsLink() {
        switchToContentFrame();
        click(showMoreOptionsLink, "Show more options link");
        switchToDefaultContent();
    }
    
    /** @return true if enabled*/
   public boolean isViewMoreSearchResultsLinkAvailable() {
       LOGGER.debug("Check if View More Search Results link enabled");
       switchToContentFrame();
       boolean result = isElementDispalyed(viewMoreSearchResultsLink);
       switchToDefaultContent();
       LOGGER.debug("View More Search Results link enabled: {}", result);
       return result;
   }
    
   /** */
   public void clickViewMoreSearchResultsLink() {
       LOGGER.debug("Click View More Search Results link");
       switchToContentFrame();
       find(viewMoreSearchResultsLink).click();
       waitLoading();
   }

   /** */
   public void clickPutInCartButton() {
       switchToContentFrame();
       click(putInCartButton, "Put in Cart button");
       switchToDefaultContent();
   }
   
   /** */
   public void clickPermissionsLink() {
       switchToContentFrame();
       click(permissionsLink, "Permissions link");
       switchToDefaultContent();
   }
   
   /** */
   public void clickPurchasesLink() {
       switchToContentFrame();
       click(purchasesLink, "Purchases link");
       switchToDefaultContent();
   }
   
   /**
    * Usage Options block.
    * @return Block
    */
   @Element(name = "Usage Options", type=ElementTypes.BLOCK)
   public Block usageOptionsSection() {
       return new Block(usageOptionsSection, Constants.CONTENT_FRAME_LOCATOR, "Usage Options");
   }
   
   /** @return true if available*/
   public boolean isUsageOptionsSectionAvailable() {
       switchToContentFrame();
       boolean result = isElementDispalyed(usageOptionsSection, "Usage Options section Section");
       switchToDefaultContent();
       return result;
   }
   
   /** */
   public void clickUpdateContentUsageOptionsButton() {
       clickInContentFrame(updateContentUsageOptionsButton, "Update content usage options button");
   }
   
   /** @return true if available*/
   public boolean isUpdateContentUsageOptionsButtonAvailable() {
       boolean result = isElementDispalyedInContentFrame(updateContentUsageOptionsButton, 
           "Update Content Usage Options button");
       return result;
   }
   
   /** @param optionIndex 
    * @return true if displayed*/
   public boolean isTermApplyTextDisplayed(int optionIndex) {
       By xpath = By.xpath(String.format(termApplyXpathPattern, optionIndex));
       return isElementDispalyedInContentFrame(xpath, "Term Apply text for option #" + optionIndex);
    }
   
   /** @param optionIndex 
    * @return true if displayed*/
   public boolean isTermApplyLinkDisplayed(int optionIndex) {
       By xpath = By.xpath(String.format(termsApplyLinkXpathPattern, optionIndex));
       return isElementDispalyedInContentFrame(xpath, "Term Apply text for option #" + optionIndex);
    }
   
   /** @param optionIndex 
    * @return text of Tip*/
   public String getTextOfTipForAliasd(int optionIndex) {
       By xpath = By.xpath(String.format(aliasTipXpathPattern, optionIndex));
       clickInContentFrame(xpath, "Tip sign");
       String result = getTextInContentFrame(tip, "Tip for option #" + optionIndex);
       LOGGER.debug("Tip is displayed wit text: {}", result);
       return result;
   }

    /** @return .*/
    public boolean isAltMetricsPresent() {
        boolean result = isElementDispalyedInContentFrame(altMetricBadge, "Alt Metrics");
        switchToDefaultContent();
        return result;
    }
    
    /**@return active tab name*/
    public String getActiveTabInUsageOptions() {
        return getTextInContentFrame(activeTabInUsageOptions, "Active tab Usage Options");
        
    }
    
    /**@return label*/
    public Label errorTitleLabel() {
        return new Label(errorTitleLabel, Constants.CONTENT_FRAME_LOCATOR, "Error title lable");
    }
    
    /**@return label*/
    public Label errorMsgLabel() {
        return new Label(errorMsgLabel, Constants.CONTENT_FRAME_LOCATOR, "Error message lable");
    }
    
    /**@return link*/
    public Link errorMsgLink() {
        return new Link(errorMsgLink, Constants.CONTENT_FRAME_LOCATOR, 
                    "Link in error message");
    }

    /**Return true if page contains text "Item found in library...".
     * @return .*/
    public boolean isItemInLibrary() {
        switchToContentFrame();
        boolean result = find(itemInLibrary).isDisplayed();
        switchToDefaultContent();
        return result;
    }
}
